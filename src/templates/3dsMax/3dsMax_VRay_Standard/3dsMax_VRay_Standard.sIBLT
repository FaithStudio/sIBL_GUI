[Template]
Name = @Name | Standard | String | Template Name
Path = @Path | | String | Template Path
HelpFile = @HelpFile | help/3dsMax_VRay_Standard Template Manual.html | String | Help File
Release = @Release | 1.0.2 | String | Template Release
Date = @Date | 29 May 2010 | String | Date
Author = @Author | Dschaga / Kel Solaar | String | Author
Email = @Email | kelsolaar_fool@hotmail.com | String | Email
Url = @Url | http://my.opera.com/KelSolaar/blog/ | String | Url
Software = @Software | 3dsMax  | String | Software
Version = @Version | 2009+ | String | Version
Renderer = @Renderer | VRay| String | Renderer
OutputScript = @OutputScript | sIBL_3dsmax_Import.ms | String | Output Script
Comment = @Comment | This is 3dsmax 2K VRay Template. | String | Comment

[sIBL File Attributes]
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Background|BGfile = @BGfile
Enviroment|EVfile = @EVfile
Reflection|REFfile = @REFfile
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createLighting = @createLighting | 1 | Boolean | Create Lighting
createReflection = @createReflection | 1 | Boolean | Create Reflection
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
createFeedBack = @createFeedBack | 1 | Boolean | Create Feedback
feedbackRadius = @feedbackRadius | 1000 | Float | Feedback Radius
sunAsVraySun = @sunAsVraySun | 1 | Boolean | Sun As VRaySun Light
createGround = @createGround | 1 | Boolean | Create Ground
hideLights = @hideLights | 1 | Boolean | Hide Lights
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Win32 | String
TargetApplication = @TargetApplication | MAX.Application | String
ExecutionCommand = @ExecutionCommand | fileIn ("$loaderScriptPath") | String

[Script]
/*
@OutputScript - @Release For @Software @Version
Author : @Author
EMail : @Email
Homepage : @Url
Template Path : @Path
Template Last Modified : @Date
sIBL_GUI
*/

struct sIBL_datas ( backgroundFilePath, lightingFilePath, reflectionFilePath, sunU, sunV, sunColor, sunMultiplier, dynamicLights )
struct sIBL_options ( createBackground, createLighting, createReflection,  createSun, createLights, createFeedBack, feedbackRadius, sunAsVraySun, hideLights, createGround, activateLinearWorkflow )
	
global IBL_SET_DATAS =  sIBL_datas backgroundFilePath:"@BGfile" lightingFilePath:"@EVfile" reflectionFilePath:"@REFfile" sunU:@SUNu sunV:@SUNv sunColor:"@SUNcolor" sunMultiplier:@SUNmulti dynamicLights:"@dynamicLights"
global LOADER_OPTIONS = sIBL_options createBackground:@createBackground createLighting:@createLighting createReflection:@createReflection createSun:@createSun createLights:@createLights createFeedBack:@createFeedBack feedbackRadius:@feedbackRadius sunAsVraySun:@sunAsVraySun hideLights:@hideLights createGround:@createGround activateLinearWorkflow:@activateLinearWorkflow

fn sIBL_3dsmax_VRay_deleteByName currentNode =
(
	local nodes = getNodeByName currentNode all:on

	for currentNode in nodes do 
		delete currentNode
)

fn sIBL_3dsmax_VRay_deleteChildren currentNode =
(
	if( getNodeByName currentNode != undefined ) then
	(
		for child in ( getNodeByName currentNode ).children do
			if( not isDeleted child ) then 
				delete child
	)
)

fn sIBL_3dsmax_VRay_environmentDeletion =
(
	-- sIBL_Lights Group Children Deletion.
	sIBL_3dsmax_VRay_deleteChildren "sIBL_Lights"

	-- sIBL Group Children Deletion.
	sIBL_3dsmax_VRay_deleteChildren "sIBL_Datas"

	-- sIBL Group Deletion.
	sIBL_3dsmax_VRay_deleteByName "sIBL_Datas"
	
	-- sIBL Environment Map  Deletion.
	environmentMap = undefined
	
	freeSceneBitmaps()
)

fn sIBL_3dsmax_VRay_activateVRay =
(
	renderers.current = vray()
	renderers.current.gi_on = True
)

fn sIBL_3dsmax_VRay_hideLights =
(
	hide lights
)

fn sIBL_3dsmax_VRay_getSIBLGroup = 
(
	local sIBL_Point = Point name:"sIBL_Point" centermarker:off axistripod:off cross:off Box:off
	group sIBL_Point name:"sIBL_Datas"
)

fn sIBL_3dsmax_VRay_getFeedBack feedbackRadius createBackground texturePath =
(
	local feedbackSphere = Sphere radius:feedbackRadius segs:32 mapcoords:on
	
	local normalModifier_ = Normalmodifier()
	normalModifier_.flip = True
	addModifier feedbackSphere normalModifier_
	collapseStack feedbackSphere
	
	feedbackSphere.backfacecull = on
	feedbackSphere.renderable = False
	
	if( createBackground == 1 ) then
	(
		local feedbackShader = StandardMaterial name:"sIBL_FeedBackShader"
		feedbackShader.selfIllumAmount = 100
		feedbackShader.diffuse = color 255 255 255
		feedbackShader.ambient = feedbackShader.diffuse
		feedbackShader.diffuseMap =  Bitmaptexture fileName:texturePath
		feedbackShader.diffuseMap.coordinates.u_tiling = -1
		feedbackSphere.material = feedbackShader
		showTextureMap feedbackShader True
	)

	feedbackSphere.parent = getNodeByName "sIBL_Datas"
	setTransformLockFlags feedbackSphere #{1,2,3,4,5}
	
	feedbackSphere.name = "sIBL_FeedBack"
	
	return feedbackSphere
)

fn sIBL_3dsmax_VRay_getLightsGroup = 
(
	local sIBL_Point = Point name:"sIBL_Lights_Point" centermarker:off axistripod:off cross:off Box:off
	local lightsGroup = group sIBL_Point name:"sIBL_Lights"

	lightsGroup.parent = getNodeByName "sIBL_Datas"
		
	return lightsGroup
)

fn sIBL_3dsmax_VRay_getLight lightName lightColor intensity lightDistance uCoordinate vCoordinate asVraySun =
(
	lightsGroup = getNodeByName "sIBL_Lights"
	if( lightsGroup == undefined ) then
		lightsGroup = sIBL_3dsmax_VRay_getLightsGroup()

	lightColorTokens = filterstring lightColor ","

	uCoordinate += 0.75
	projectedRadius = cos( ( 0.5 - vCoordinate ) * 180 )
	
	local xPos = lightDistance * ( ( cos( uCoordinate * 360 ) ) * projectedRadius )
	local yPos = lightDistance * ( ( sin( uCoordinate * 360 ) ) * projectedRadius ) * -1
	local zPos = lightDistance * ( sin( ( 0.5 - vCoordinate ) * 180 ) )
	
	local lightTarget = TargetObject transform:( matrix3 [1,0,0] [0,1,0] [0,0,1] [0,0,0] )
	lightTarget.parent = lightsGroup
	
	if( asVraySun == 1 ) then
	(
		local light = VRaySun pos:[ ( xPos as float ),  ( yPos as float ), ( zPos as float ) ] target:lightTarget
		light.intensity_multiplier = intensity * 0.0215
	)
	else
	(
		local lightFalloff = lightDistance + 5	
		local light = TargetDirectionallight rgb:( color ( lightColorTokens[1] as float ) ( lightColorTokens[2] as float ) ( lightColorTokens[3] as float ) ) multiplier:( intensity as float) castShadows:on hotspot:lightDistance falloff:lightFalloff pos:[ ( xPos as float ),  ( yPos as float ), ( zPos as float ) ] target:lightTarget
		light.shadowGenerator = VRayShadow()
	)
	
	light.parent = lightsGroup

	lightTarget.name = lightName + "_Target"
	light.name = lightName
)

fn sIBL_3dsmax_VRay_createDynamicLights dynamicLights lightDistance =
(
	local dynamicLightsTokens = filterString dynamicLights "|"

	for i = 1 to dynamicLightsTokens.count by 8 do
	(		
		local lightName = "sIBL_" + substituteString dynamicLightsTokens[i+1] " " "_"
		local lightColor = dynamicLightsTokens[i+2] + "," + dynamicLightsTokens[i+3] + "," + dynamicLightsTokens[i+4]
		local intensity = dynamicLightsTokens[i+5] as float
		local uCoordinate = dynamicLightsTokens[i+6] as float
		local vCoordinate = dynamicLightsTokens[i+7] as float
		
		sIBL_3dsmax_VRay_getLight lightName lightColor intensity lightDistance uCoordinate vCoordinate
	)
)

fn sIBL_3dsmax_VRay_createSun sunColor sunMultiplier lightDistance sunU sunV asVraySun=
(
	sIBL_3dsmax_VRay_getLight "sIBL_Sun" sunColor sunMultiplier lightDistance sunU sunV asVraySun
)
	
fn sIBL_3dsmax_VRay_getEnvironmentBranch branchName filePath =
(
	local texture = VRayHDRI()
	texture.hdriMapName = filePath
	texture.horizontalRotation = 90
	texture.horizontalFlip = True
	texture.maptype = 2

	texture.name = branchName + "_VRayHDRI"	
	
	return texture
)

fn sIBL_3dsmax_VRay_getClassicEnvironmentBranch branchName filePath =
(
	local texture = Bitmaptexture()
	texture.filename = filePath
	texture.coordinates.UVW_Type = 0
	texture.coordinates.mapping = 0
	texture.coordinates.mappingtype = 1	
	texture.coordinates.U_Tile = True
	texture.coordinates.U_Tiling = -1.0
	texture.coordinates.U_Offset = 0

	local colorCorrection_ =  ColorCorrection()
	colorCorrection_.map = texture

	texture.name = branchName + "_BitmapTexture"
	colorCorrection_.name = branchName + "_ColorCorrection"

	return colorCorrection_
)

fn sIBL_3dsmax_VRay_setEnvironment createBackground createLighting createReflection backgroundFilePath lightingFilePath reflectionFilePath =
(
	if( createBackground == 1 ) then
	(
		local backgroundBranch = sIBL_3dsmax_VRay_getClassicEnvironmentBranch "sIBL_Background" backgroundFilePath
		environmentMap = backgroundBranch
		-- Fact : 3dsMax 2010 Fails To Update Correctly The Coordinates Mapping Type Until Connected To The EnvironmentMap Slot.
		environmentMap.map.coordinates.mapping = 0
	)
	
	if( createLighting == 1 ) then
	(
		local lightingBranch = sIBL_3dsmax_VRay_getEnvironmentBranch "sIBL_Lighting" lightingFilePath
		renderers.current.environment_gi_on = True
		renderers.current.environment_gi_map = lightingBranch
	)
	
	if( createReflection == 1 ) then
	(
		local reflectionBranch = sIBL_3dsmax_VRay_getEnvironmentBranch "sIBL_Reflection" reflectionFilePath
		renderers.current.environment_rr_on = True
		renderers.current.environment_rr_map = reflectionBranch
		
		local refractionBranch = sIBL_3dsmax_VRay_getEnvironmentBranch "sIBL_Refraction" reflectionFilePath
		renderers.current.environment_refract_on = True
		renderers.current.environment_refract_map = refractionBranch
	)
)

fn sIBL_3dsmax_VRay_connectFeedBackToSIBLShaders createBackground createLighting createReflection =
(
	feedbackSphere = getNodeByName "sIBL_FeedBack"
	
	if( createBackground == 1 ) then
	(
		paramWire.connect feedbackSphere.rotation.controller[#Z_Rotation] environmentMap.map.coordinates[#U_Offset] "(Z_Rotation-(pi*2))*2/pi/4"
	)
	
	if( createLighting == 1 ) then
	(
		paramWire.connect feedbackSphere.rotation.controller[#Z_Rotation] renderers.current.environment_gi_map[#horizontalRotation] "-Z_Rotation+(pi/2)"
	)
	
	if( createReflection == 1 ) then
	(
		paramWire.connect feedbackSphere.rotation.controller[#Z_Rotation] renderers.current.environment_rr_map[#horizontalRotation] "-Z_Rotation+(pi/2)"
		paramWire.connect feedbackSphere.rotation.controller[#Z_Rotation] renderers.current.environment_refract_map[#horizontalRotation] "-Z_Rotation+(pi/2)"
	)
)

fn sIBL_3dsmax_VRay_connectFeedBackToLights =
(
	lightsGroup = getNodeByName "sIBL_Lights"
	if( lightsGroup != undefined ) then
		feedbackSphere = getNodeByName "sIBL_FeedBack"
		paramWire.connect feedbackSphere.rotation.controller[#Z_Rotation] lightsGroup.rotation.controller[#Z_Rotation] "Z_Rotation"
		paramWire.connect feedbackSphere.transform.controller[#Scale] lightsGroup.transform.controller[#Scale] "Scale"
)

fn sIBL_3dsmax_VRay_createGround currentScale =
(
	local currentScale = currentScale * ( sqrt 2 )
	local currentPlane = plane typeinCreationMethod:1 length:currentScale width:currentScale
	currentPlane.backfacecull = on
	currentPlane.parent = getNodeByName "sIBL_Datas"
	
	local groundShader = VRayMtl name:"sIBL_GroundShader"
	currentPlane.material = groundShader

	currentPlane.name =  "sIBL_Ground"
)

fn sIBL_3dsmax_VRay_activateLinearWorkflow createBackground =
(
	renderers.current.colorMapping_gamma = 2.2
	if( createBackground == 1 ) then
	(
		environmentMap.lightnessMode = 1
		environmentMap.gammaRGB = 1/2.2
	)
)

fn sIBL_3dsmax_VRay_setup  =
(
	if( vray != undefined ) then
	(
		print "sIBL_GUI | Starting sIBL File Import !"
		
		sIBL_3dsmax_VRay_environmentDeletion()
		
		sIBL_3dsmax_VRay_activateVRay()
		
		if( LOADER_OPTIONS.hideLights == 1 ) then
			sIBL_3dsmax_VRay_hideLights()
	
		sIBL_3dsmax_VRay_getSIBLGroup()
		
		if( LOADER_OPTIONS.createFeedBack == 1 ) then
			sIBL_3dsmax_VRay_getFeedBack LOADER_OPTIONS.feedbackRadius LOADER_OPTIONS.createBackground IBL_SET_DATAS.backgroundFilePath

		sIBL_3dsmax_VRay_setEnvironment LOADER_OPTIONS.createBackground LOADER_OPTIONS.createLighting LOADER_OPTIONS.createReflection IBL_SET_DATAS.backgroundFilePath IBL_SET_DATAS.lightingFilePath IBL_SET_DATAS.reflectionFilePath
		
		if( LOADER_OPTIONS.createFeedBack == 1 ) then
			sIBL_3dsmax_VRay_connectFeedBackToSIBLShaders  LOADER_OPTIONS.createBackground LOADER_OPTIONS.createLighting LOADER_OPTIONS.createReflection

		if( LOADER_OPTIONS.createSun == 1 and IBL_SET_DATAS.sunU != -1 and IBL_SET_DATAS.sunV != -1 ) then
			sIBL_3dsmax_VRay_createSun IBL_SET_DATAS.sunColor IBL_SET_DATAS.sunMultiplier LOADER_OPTIONS.feedbackRadius IBL_SET_DATAS.sunU IBL_SET_DATAS.sunV LOADER_OPTIONS.sunAsVraySun
	
		if( LOADER_OPTIONS.createLights == 1 and IBL_SET_DATAS.dynamicLights != "-1" ) then
			sIBL_3dsmax_VRay_createDynamicLights IBL_SET_DATAS.dynamicLights LOADER_OPTIONS.feedbackRadius
		
		if( LOADER_OPTIONS.createFeedBack == 1 ) then
			sIBL_3dsmax_VRay_connectFeedBackToLights()

		if( LOADER_OPTIONS.createGround == 1 ) then
			sIBL_3dsmax_VRay_createGround LOADER_OPTIONS.feedbackRadius
		
		if( LOADER_OPTIONS.activateLinearWorkflow == 1 ) then
			sIBL_3dsmax_VRay_activateLinearWorkflow LOADER_OPTIONS.createBackground
		
		print "sIBL_GUI | sIBL File Import Finished !"
	)
	else
		messageBox "sIBL_GUI | VRay Renderer Is Not Available !" title:"sIBL_GUI Error"
)

sIBL_3dsmax_VRay_setup()