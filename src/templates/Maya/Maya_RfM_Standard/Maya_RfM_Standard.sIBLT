[Template]
Name = @Name | Standard | String | Template Name
HelpFile = @HelpFile | help/Maya_RfM_Standard Template Manual.htm | String | Help File
Release = @Release | 1.0.5 | String | Template Release
Date = @Date | 20 April 2010 | String | Date
Author = @Author | Kel Solaar | String | Author
Email = @Email | kelsolaar_fool@hotmail.com | String | Email
Url = @Url | http://my.opera.com/KelSolaar/blog/ | String | Url
Software = @Software | Maya | String | Software
Version = @Version | 2K | String | Version
Renderer = @Renderer | RfM | String | Renderer
OutputScript = @OutputScript | sIBL_Maya_Import.mel | String | Output Script
Comment = @Comment | This is Renderman For Maya Template. | String | Comment

[sIBL File Attributes]
Background|BGfile = @BGfile
Background|BGheight = @BGheight
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createLighting = @createLighting | 1 | Boolean | Create Lighting
createReflection = @createReflection | 1 | Boolean | Create Reflection
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
createFeedBack = @createFeedBack | 1 | Boolean | Create Feedback
feedbackRadius = @feedbackRadius | 500 | Float | Feedback Radius
createGround = @createGround | 1 | Boolean | Create Ground
hideLights = @hideLights | 1 | Boolean | Hide Lights
activateRaytracing = @activateRaytracing | 1 | Boolean | Activate Raytracing
activateColorBleeding = @activateColorBleeding | 1 | Boolean | Activate Color Bleeding
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | source "$loaderScriptPath"; | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 2048 | Integer | Default Port

[Script]
// @OutputScript - @Release For @Software @Version
// Author : @Author
// EMail : @Email
// Homepage : @Url
// Template Last Modified : @Date
// sIBL_Framework
string $backgroundFilePath = "@BGfile";
int $backgroundWidth = @BGheight*2;
string $lightingFilePath = "@EVfile";
float $lightingMultiplier = @EVmulti;
float $lightingGamma = @EVgamma;
string $reflectionFilePath = "@REFfile";
float $reflectionMultiplier = @REFmulti;
float $reflectionGamma = @REFgamma;
float $sunU = @SUNu;
float $sunV = @SUNv;
float $sunColor[] = {@SUNcolor};
float $sunMultiplier = @SUNmulti;
float $Height = @Height;
float $North = @North;
string $dynamicLights = "@dynamicLights";
int $createBackground = @createBackground;
int $createLighting = @createLighting;
int $createReflection = @createReflection;
int $createSun = @createSun;
int $createLights = @createLights;
int $createFeedBack = @createFeedBack;
float $feedbackRadius = @feedbackRadius;
int $createGround = @createGround;
int $hideLights = @hideLights;
int $activateRaytracing = @activateRaytracing;
int $activateColorBleeding = @activateColorBleeding;
int $activateLinearWorkflow = @activateLinearWorkflow;

sIBL_Maya_RfM_Setup($backgroundFilePath,
		$backgroundWidth,
		$lightingFilePath,
		$lightingMultiplier,
		$lightingGamma,
		$reflectionFilePath,
		$reflectionMultiplier,
		$reflectionGamma,
		$sunU,
		$sunV,
		$sunColor,
		$sunMultiplier,
		$Height,
		$North,
		$dynamicLights,
		$createBackground,
		$createLighting,
		$createReflection,
		$createSun,
		$createLights,
		$createFeedBack,
		$createGround,
		$feedbackRadius,
		$hideLights,
		$activateRaytracing,
		$activateColorBleeding,
		$activateLinearWorkflow);

global proc sIBL_Maya_RfM_Setup(string $backgroundFilePath,
			int $backgroundWidth,
			string $lightingFilePath,
			float $lightingMultiplier,
			float $lightingGamma,
			string $reflectionFilePath,
			float $reflectionMultiplier,
			float $reflectionGamma,
			float $sunU,
			float $sunV,
			float $sunColor[],
			float $sunMultiplier,
			float $Height,
			float $North,
			string $dynamicLights,
			int $createBackground,
			int $createLighting,
			int $createReflection,
			int $createSun,
			int $createLights,
			int $createFeedBack,
			int $createGround,
			float $feedbackRadius,
			int $hideLights,
			int $activateRaytracing,
			int $activateColorBleeding,
			int $activateLinearWorkflow)
{
	print("sIBL_GUI | Starting sIBL File Import !\n");

	sIBL_Maya_RfM_ActivateRfM();

	sIBL_Maya_RfM_EnvironmentDeletion();

	sIBL_Maya_RfM_GetMainLocator();

	if ($hideLights)
		sIBL_Maya_RfM_HideLights();

	sIBL_Maya_RfM_GetEnvironment($createBackground, $createLighting, $createReflection, $backgroundFilePath, $lightingFilePath, $reflectionFilePath, $feedbackRadius, $activateColorBleeding);

	if ($createFeedBack)
	{
		if($backgroundWidth > 8192)
		{
			confirmDialog -title "sIBL_GUI | Information" -message ( "The Background Image Is Too Large To Be Displayed On The Visual Feedback.\nCurrent Environment Image Width : " +  $backgroundWidth + " Pixels.\nThe Visual Feedback Will Use The Reflection Image Instead." )  -button "Ok" -defaultButton "Ok";
			sIBL_Maya_RfM_GetFeedback($reflectionFilePath, $feedbackRadius);
		}
		else
		{
			sIBL_Maya_RfM_GetFeedback($backgroundFilePath, $feedbackRadius);
		}
	}

	if (sIBL_Maya_RfM_ObjectExists( "sIBL_Feedback", "sIBL_GUI | No Feedback Found, Aborting !\n"))
	{
		if ($sunU != -1 && $sunV != -1)
		{
			if ($createSun)
			{
				sIBL_Maya_RfM_GetSun($sunU, $sunV, $sunColor, $sunMultiplier, $feedbackRadius );
			}
		}

		if ($dynamicLights != -1)
		{
			if ($createLights)
			{
				sIBL_Maya_RfM_GetDynamicLights($dynamicLights, $feedbackRadius);
			}
		}

		string $feedback = sIBL_Maya_RfM_GetObject("sIBL_Feedback");
		sIBL_Maya_RfM_ConnectFeedBackToSIBLShaders($feedback, $createBackground, $createLighting, $createReflection);

		if($createGround)
			sIBL_Maya_RfM_GetGround($feedbackRadius);

		if ($activateRaytracing)
			sIBL_Maya_RfM_ActivateRaytracing();

		if ($activateLinearWorkflow)
			sIBL_Maya_RfM_ActivateLinearWorkflow($createBackground);

		print("sIBL_GUI | sIBL File Import Finished !\n");
		}
}

global proc sIBL_Maya_RfM_HideLights()
{
	SelectAllLights();
	if(size(`ls -sl`) != 0)
		HideSelectedObjects();
}

global proc sIBL_Maya_RfM_DeleteType( string $type, string $filter)
{
		string $typesList[] = `ls -type $type $filter`;
		if(size($typesList) != 0)
			delete($typesList);
}

global proc sIBL_Maya_RfM_EnvironmentDeletion()
{
	// sIBL Transform Group Deletion.
	string $sceneSIBLGroup[] = `ls -fl "sIBL"`;
	if ($sceneSIBLGroup[0] != "")
	{
		delete($sceneSIBLGroup);
	}

	// sIBL Texture Files Deletion.
	sIBL_Maya_RfM_DeleteType("file", "sIBL*");

	// sIBL place2dTexture Shaders Deletion.
	sIBL_Maya_RfM_DeleteType("place2dTexture", "sIBL*");

	// sIBL lambert Shaders Deletion.
	sIBL_Maya_RfM_DeleteType("lambert", "sIBL*");
	
	// sIBL Surface Shaders Deletion.
	sIBL_Maya_RfM_DeleteType("surfaceShader", "sIBL*");
	
	// sIBL Condition Nodes Deletion.
	sIBL_Maya_RfM_DeleteType("condition", "sIBL*");
	
	// sIBL gammaCorrect Nodes Deletion.
	sIBL_Maya_RfM_DeleteType("gammaCorrect", "sIBL*");	
	
	// sIBL RenderManEnvLightShape Deletion.
	sIBL_Maya_RfM_DeleteType("RenderManEnvLightShape", "sIBL*");

	// sIBL displayLayer Nodes Deletion.
	sIBL_Maya_RfM_DeleteType("displayLayer", "sIBL*");
	
	// sIBL RenderMan Nodes Deletion.
	sIBL_Maya_RfM_DeleteType("RenderMan", "sIBL*");
}

global proc sIBL_Maya_RfM_GetMainLocator()
{
	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();
	string $sIBLLocator = `createNode annotationShape`;
	
	setAttr ($sIBLLocator + ".displayArrow") 0;
	setAttr -lock true -keyable false ($sIBLLocator + ".displayArrow");
	setAttr -type "string" ($sIBLLocator + ".text") "[ Smart IBL Controls ]";
	
	string $sIBLLocatorTransform = sIBL_Maya_RfM_GetTransform($sIBLLocator);
	
	// Adding Attributes For Various Toggling And CC Controls.
	addAttr -ln "renderTogglers" -nn "[ Render Togglers ]" -at "enum" -en "Smart IBL" $sIBLLocatorTransform;
	setAttr -e-keyable true ($sIBLLocatorTransform + "." + "renderTogglers" );
	setAttr -lock true ($sIBLLocatorTransform + "." + "renderTogglers" );

	string $componentsList[] = { "Background", "Reflection", "Lighting" };
	
	for( $component in $componentsList )
	{
		addAttr -ln ( "toggle" + $component )  -nn ( $component ) -at bool  $sIBLLocatorTransform;
		setAttr -e-keyable true ($sIBLLocatorTransform + ( ".toggle" + $component ) );
		setAttr ($sIBLLocatorTransform + ( ".toggle" + $component ) ) true;
	}

	string $controlsList[] = { "Bias", "Gain" };
	
	for( $component in $componentsList )
	{	
		addAttr -ln ("cc" + $component) -nn ( "[ " + $component + " CC ]" ) -at "enum" -en "Smart IBL" $sIBLLocatorTransform;
		setAttr -e-keyable true ($sIBLLocatorTransform + "." + ("cc" + $component) );
		setAttr -lock true ($sIBLLocatorTransform + "." + ("cc" + $component) );
		
		for( $control in $controlsList )
		{
			if( $component == "Background" && $control == "Bias" )
				$control = "Gamma";
			
			float $value = 0.5;
			if( $component == "Background" && $control == "Gain" )
				$value = 1;

			string $lowerCaseComponent = `tolower $component`;
			addAttr -ln ( $lowerCaseComponent + $control )  -nn $control -at double  $sIBLLocatorTransform;
			setAttr -e-keyable true ($sIBLLocatorTransform + "." + ( $lowerCaseComponent + $control ) );
			setAttr ($sIBLLocatorTransform + "." + ( $lowerCaseComponent + $control ) ) true;
			setAttr ($sIBLLocatorTransform + "." + ( $lowerCaseComponent + $control ) ) $value;
		}
	}

	setAttr ( $sIBLLocatorTransform + ".ty" ) 5;
	string $locksList[] = { "rx", "ry", "rz", "sx", "sy", "sz" };
	for( $lock in $locksList )
		setAttr -lock true -keyable false ($sIBLLocatorTransform + "." + $lock);

	parent $sIBLLocatorTransform $sIBLGroup;
	
	rename ( "sIBL" + $sIBLLocatorTransform) "sIBL_Controls";
}

global proc sIBL_Maya_RfM_GetEnvironmentSphereBranch(float $radius, string $prefix, string $filePath, int $useOverride)
{
	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();

	string $environmentSphere[] = `sphere -name ($prefix + "_Environment_Sphere")`;
	rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 4 -du 3 -sv 8 -dv 3 -tol 0.01 -fr 0  -dir 2 $environmentSphere;

	string $environmentSphereShapes[] = sIBL_Maya_RfM_GetShapes($environmentSphere[0]);
	select -r $environmentSphereShapes[0];

	setAttr ($environmentSphereShapes[0] + ".overrideEnabled") 1;
	setAttr ($environmentSphereShapes[0] + ".overrideShading") 0;

	delete -ch;

	setAttr ($environmentSphere[0] + ".rotateZ") (90);
	setAttr ($environmentSphere[0] + ".scaleZ") (-1);
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $environmentSphere[0];

	string $scaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $scaleAttribute in $scaleAttributesList )
		setAttr ($environmentSphere[0] + "." + $scaleAttribute) $radius;

	string $surfaceShader = `shadingNode -asShader surfaceShader`;
	string $shadingEngine = `sets -renderable true -noSurfaceShader true -empty`;
	sets -renderable true -noSurfaceShader true -empty -name $shadingEngine;
	connectAttr -f ($surfaceShader + ".outColor") ($shadingEngine + ".surfaceShader");

	string $file = `createNode file`;	
	string $gammaNode = `createNode gammaCorrect`;
	
	if($useOverride)
	{
		string $conditionNode = `createNode condition`;
		setAttr ($conditionNode + ".secondTerm") 1;
		connectAttr -f ($gammaNode + ".outValue") ($conditionNode + ".colorIfTrue");
			
		string $blendColors = `createNode blendColors`;
		setAttr ($blendColors + ".color1") -type double3 0 0 0 ;
		setAttr ($blendColors + ".color2") -type double3 0 0 0 ;
		setAttr ($blendColors + ".blender") 0;
		
		connectAttr -f ($blendColors + ".output") ($conditionNode + ".colorIfFalse");
		connectAttr -f ($conditionNode + ".outColor") ($surfaceShader + ".outColor");
		
		rename $conditionNode ($prefix + "_" + `nodeType $conditionNode`);
		rename $blendColors ($prefix + "_" + `nodeType $blendColors`);
	}
	else
	{
		connectAttr -f ($gammaNode + ".outValue") ($surfaceShader + ".outColor");
	}

	setAttr -type "string" ($file + ".fileTextureName") $filePath;

	if (!`attributeExists "resolution" $file`)
		addAttr -ln "resolution" -at long $file;
 	setAttr  ($file + ".resolution") 2048;

	connectAttr -f ($file + ".outColor") ($gammaNode + ".value");

	string $place2dTexture = `createNode place2dTexture`;

	connectAttr -f ($place2dTexture + ".outUV") ($file + ".uvCoord");
	connectAttr -f ($place2dTexture + ".outUvFilterSize") ($file + ".uvFilterSize");

	string $uvAttributes[] = { "coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV"};
	for( $uvAttribute in $uvAttributes )
		connectAttr -f ($place2dTexture + "." + $uvAttribute) ($file + "." + $uvAttribute);

	setAttr ($place2dTexture + ".rotateFrame") 90;

	select -r $environmentSphere[0];
	sets -e -forceElement $shadingEngine;

	parent $environmentSphere[0] $sIBLGroup;

	rename $environmentSphere[0] ($prefix + "_Environment_Sphere");
	rename $surfaceShader ($prefix + "_" + `nodeType $surfaceShader`);
	rename $shadingEngine ($prefix + "_" + `nodeType $shadingEngine`);
	rename $gammaNode ($prefix + "_" + `nodeType $gammaNode`);
	rename $file ($prefix + "_" + `nodeType $file`);
	rename $place2dTexture ($prefix + "_" + `nodeType $place2dTexture`);
}

global proc sIBL_Maya_RfM_GetEnvironmentLightBranch(float $radius, string $prefix, string $filePath)
{
	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();

	string $environmentLight = rmanCreateEnvLight();

	setAttr -type "string" ($environmentLight + ".rman__EnvMap") $filePath;
	setAttr ($environmentLight + ".rman__LightPrimaryVisibility") 0;
	setAttr ($environmentLight + ".rman__EnvSamples") 128;
	setAttr ($environmentLight + ".rman__EnvGIMaxVariation") 1;
	setAttr ($environmentLight + ".rman__EnvColorCorrect") 1;
	
	setAttr ($environmentLight + ".template") 1;

	string $environmentLightTransform = sIBL_Maya_RfM_GetTransform($environmentLight);
	
	string $scaleAttributesList[] = {"scaleX", "scaleZ"};
	for( $scaleAttribute in $scaleAttributesList )
		setAttr ($environmentLightTransform + "." + $scaleAttribute) $radius;
	setAttr ($environmentLightTransform + ".scaleY") (- $radius);
	setAttr ($environmentLightTransform + ".rotateX") -90;
	setAttr ($environmentLightTransform + ".rotateY") 90;

	parent $environmentLightTransform $sIBLGroup;
	
	rename ("sIBL" + $environmentLightTransform) ($prefix + "_EnvironmentLigtht");
}

global proc sIBL_Maya_RfM_GetEnvironment(int $createBackground, int $createLighting, int $createReflection, string $backgroundFilePath, string $lightingFilePath, string $reflectionFilePath, float $feedbackRadius, int $activateColorBleeding)
{
	if ($createBackground)
	{
		sIBL_Maya_RfM_GetEnvironmentSphereBranch(($feedbackRadius - ( $feedbackRadius * 5 / 100 )), "sIBL_Background", $backgroundFilePath, 1);
		
		string $renderStats[] = { "castsShadows", "receiveShadows", "visibleInReflections", "visibleInRefractions", "opposite"};
		for( $stat in $renderStats )
			setAttr ("sIBL_Background_Environment_SphereShape" + "." + $stat) false;
	}

	if ($createLighting)
	{
		sIBL_Maya_RfM_GetEnvironmentLightBranch($feedbackRadius*2 - ( $feedbackRadius * 7.5 / 100 ), "sIBL_Lighting", $lightingFilePath);
		
		string $environmentLightNode = "sIBL_Lighting_EnvironmentLigthtShape";
		setAttr ($environmentLightNode + ".rman__EnvEmitSpecular") 0;
		
		if ($activateColorBleeding)
		{
			rmanSetAttr($environmentLightNode,"rman__EnvGIScheme","colorbleeding");
			string $passNode = `createRenderManNode pass:render:RenderRadiosity`;
			connectAttr ($passNode + ".message") ($environmentLightNode + ".rman__GDMap");
			
			rename $passNode sIBL_rmanRenderRadiosityPass;
		}
		else
			rmanSetAttr("sIBL_Lighting_EnvironmentLigthtShape","rman__EnvGIScheme","occlusion");
	}

	if ($createReflection)
	{
		sIBL_Maya_RfM_GetEnvironmentLightBranch($feedbackRadius*2 - ( $feedbackRadius * 10 / 100 ), "sIBL_Reflection", $reflectionFilePath);
		
		string $environmentLightNode = "sIBL_Reflection_EnvironmentLigthtShape";
		setAttr ($environmentLightNode + ".rman__EnvEmitDiffuse") 0;
		rmanSetAttr($environmentLightNode,"rman__EnvGIScheme","none");
	}
}

global proc string sIBL_Maya_RfM_GetSIBLGroup()
{
	string $sIBLGroup[] = `ls -fl "sIBL"`;
	if ($sIBLGroup[0] == "")
	{
		$sIBLGroup[0] = `createNode "transform" -n "sIBL"`;

		string $locksList[] = { "tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz" };
		for( $lock in $locksList )
			setAttr -lock true -keyable false ($sIBLGroup[0] + "." + $lock);
	}

	return $sIBLGroup[0];
}

global proc string sIBL_Maya_RfM_GetFeedbackGeometry(float $feedbackRadius)
{
 	string $feedback[] = `sphere -name "sIBL_Feedback"`;
	rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 4 -du 3 -sv 8 -dv 3 -tol 0.01 -fr 0  -dir 2 $feedback;

	string $feedBackShapes[] = sIBL_Maya_RfM_GetShapes($feedback[0]);
	select -r $feedBackShapes[0];

	string $renderStats[] = { "castsShadows", "receiveShadows", "motionBlur", "primaryVisibility", "smoothShading", "visibleInReflections", "visibleInRefractions", "opposite" };
	for( $stat in $renderStats )
			setAttr ($feedBackShapes[0] + "." + $stat) false;

	delete -ch;

	setAttr ($feedback[0] + ".scaleZ") (-1);
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $feedback[0];

	string $scaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $scaleAttribute in $scaleAttributesList )
		setAttr ($feedback[0] + "." + $scaleAttribute) $feedbackRadius;

	setAttr ($feedback[0] + ".rotateZ") 90;

	string $locksList[] = { "tx", "ty", "tz", "ry", "rz" };
	for( $lock in $locksList )
		setAttr -lock true -keyable false ($feedback[0] + "." + $lock);

	string $feedBackShapes[] = sIBL_Maya_RfM_GetShapes($feedback[0]);
	setAttr ($feedBackShapes[0] + ".opposite") 0;

	sIBL_Maya_RfM_AddToDisplayLayer("sIBL_FeedBack_Layer", $feedback[0]);

	return $feedback[0];
}

global proc sIBL_Maya_RfM_GetFeedback(string $backgroundFilePath, float $feedbackRadius)
{
 	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();
	string $feedback = sIBL_Maya_RfM_GetFeedbackGeometry($feedbackRadius);
	parent $feedback $sIBLGroup;

	string $lambertShader = `shadingNode -asShader lambert`;
	string $shadingEngine = `sets -renderable true -noSurfaceShader true -empty`;
	sets -renderable true -noSurfaceShader true -empty -name $shadingEngine;
	connectAttr -f ($lambertShader + ".outColor") ($shadingEngine + ".surfaceShader");

	string $file = `createNode file`;
	if (!`attributeExists "resolution" $file`)
		addAttr -ln "resolution" -at long $file;
 	setAttr  ($file + ".resolution") 2048;

	setAttr -type "string" ($file + ".fileTextureName") $backgroundFilePath;

	connectAttr -f ($file + ".outColor") ($lambertShader + ".color");

	string $place2dTexture = `createNode place2dTexture`;

	connectAttr -f ($place2dTexture + ".outUV") ($file + ".uvCoord");
	connectAttr -f ($place2dTexture + ".outUvFilterSize") ($file + ".uvFilterSize");

	string $uvAttributes[] = { "coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV"};
	for( $uvAttribute in $uvAttributes )
		connectAttr -f ($place2dTexture + "." + $uvAttribute) ($file + "." + $uvAttribute);

	setAttr ($place2dTexture + ".rotateFrame") 90;

	select -r $feedback;
	sets -e -forceElement $shadingEngine;

	rename $lambertShader ("sIBL_Feedback_" + `nodeType $lambertShader`);
	rename $shadingEngine ("sIBL_Feedback_" + `nodeType $shadingEngine`);
	rename $file ("sIBL_Feedback_" + `nodeType $file`);
	rename $place2dTexture ("sIBL_Feedback_" + `nodeType $place2dTexture`);
}

global proc string sIBL_Maya_RfM_GetLigthsTargetLocator()
{
	string $sIBL_Lights_Target_Locator[] = `ls -fl "sIBL_Lights_Target_Locator"`;

	if ($sIBL_Lights_Target_Locator[0] == "")
	{
		string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();

		$sIBL_Lights_Target_Locator = `spaceLocator`;
		parent $sIBL_Lights_Target_Locator[0] $sIBLGroup;

		rename $sIBL_Lights_Target_Locator[0] "sIBL_Lights_Target_Locator";
	}

	$sIBL_Lights_Target_Locator = `ls -fl "sIBL_Lights_Target_Locator"`;

	sIBL_Maya_RfM_AddToDisplayLayer("sIBL_Lighting_Layer", $sIBL_Lights_Target_Locator[0]);

	return $sIBL_Lights_Target_Locator[0];
}

global proc sIBL_Maya_RfM_GetLight( string $ligthType, string $lightName, float $scale, float $color[], float $intensity, float $uCoordinate, float $vCoordinate )
{
	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();
	string $feedback[] = `ls -fl "sIBL_Feedback"`;

	string $light = `shadingNode -asLight $ligthType`;

	setAttr ($light + ".locatorScale") $scale;
	setAttr -type double3 ($light + ".color") ($color[0]/255) ($color[1]/255) ($color[2]/255);
	setAttr ($light + ".intensity") $intensity;
	setAttr ($light + ".useRayTraceShadows") 1;
	parent $light $sIBLGroup;

	string $pointOnSurfaceInfo = `createNode pointOnSurfaceInfo`;
	connectAttr -f ($feedback[0] + "Shape.worldSpace[0]") ($pointOnSurfaceInfo + ".inputSurface");
	connectAttr -f ($pointOnSurfaceInfo + ".position") ($light + ".translate");

	setAttr ($pointOnSurfaceInfo + ".parameterU") (0.5 + (0.5 - $vCoordinate));
	setAttr ($pointOnSurfaceInfo + ".parameterV") (0.5 + (0.5 - $uCoordinate));

	string $sIBL_Lights_Target_Locator = sIBL_Maya_RfM_GetLigthsTargetLocator();

	select $sIBL_Lights_Target_Locator;
	select -tgl $light;
	string $constraint[] = `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0`;

	sIBL_Maya_RfM_AddToDisplayLayer("sIBL_Lighting_Layer", $light);

	rename $light $lightName;
	rename $pointOnSurfaceInfo ($lightName + "_PointOnSurfaceInfo");
	rename $constraint[0] ($lightName + "_AimConstraint");
}

global proc sIBL_Maya_RfM_GetSun(float $sunU, float $sunV, float $sunColor[], float $sunMultiplier, float $feedbackRadius )
{
	sIBL_Maya_RfM_GetLight("directionalLight", "sIBL_Sun", ($feedbackRadius / 10), $sunColor, $sunMultiplier, $sunU, $sunV);
}

global proc sIBL_Maya_RfM_GetDynamicLights(string $compactedDynamicLights, float $feedbackRadius)
{
	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();
	string $feedback[] = `ls -fl "sIBL_Feedback"`;

	string $dynamicLights[];
	tokenize($compactedDynamicLights, "|", $dynamicLights);

	for($i=0; $i<size($dynamicLights); $i+=8)
	{
		float $color[] = {float($dynamicLights[$i+2]), float($dynamicLights[$i+3]), float($dynamicLights[$i+4])};
		sIBL_Maya_RfM_GetLight("spotLight", "sIBL_DKL_" + $dynamicLights[$i+1], ($feedbackRadius / 15), $color, float($dynamicLights[$i+5]), float($dynamicLights[$i+6]), float($dynamicLights[$i+7]));
	}
}

global proc sIBL_Maya_RfM_BridgeFeedbackControlsAndShaders( string $target )
{
		connectAttr -f ( "sIBL_Controls.toggle" + $target )  ( "sIBL_" + $target + "_EnvironmentLigtht.visibility") ;
		string $lowerCaseTarget = `tolower $target`;

		string $subComponentsList[] = {"R", "G", "B"};
		for ($subComponent in $subComponentsList) 
		{
			connectAttr -f ("sIBL_Controls." + $lowerCaseTarget + "Bias") ("sIBL_" + $target + "_EnvironmentLigthtShape.rman__EnvColorBias.rman__EnvColorBias" + $subComponent);
			connectAttr -f ("sIBL_Controls." + $lowerCaseTarget + "Gain") ("sIBL_" + $target + "_EnvironmentLigthtShape.rman__EnvColorGain.rman__EnvColorGain" + $subComponent);
		}
}

global proc sIBL_Maya_RfM_ConnectFeedBackToSIBLShaders(string $feedback, int $connectToBackground, int $connectToLighting, int $connectToReflection)
{
	if ($connectToBackground)
	{
		expression -name "sIBL_Background_Expression" -s ("sIBL_Background_Environment_Sphere.rotateX = " + $feedback + ".rotateX;\nsIBL_Background_Environment_Sphere.scaleX = " + $feedback + ".scaleX-" + $feedback + ".scaleX*5/100;\nsIBL_Background_Environment_Sphere.scaleY = " + $feedback + ".scaleY-" + $feedback + ".scaleY*5/100;\nsIBL_Background_Environment_Sphere.scaleZ = " + $feedback + ".scaleZ-" + $feedback + ".scaleZ*5/100;");

		connectAttr -f "sIBL_Controls.toggleBackground" "sIBL_Background_condition.firstTerm";

		string $gammaSubComponentsList[] = {"X", "Y", "Z"};
		for ($gammaSubComponent in $gammaSubComponentsList) 
		{
			connectAttr -f ("sIBL_Controls.backgroundGamma") ("sIBL_Background_gammaCorrect.gamma" + $gammaSubComponent);
		}

		string $gainSubComponentsList[] = {"R", "G", "B"};
		for ($gainSubComponent in $gainSubComponentsList) 
		{
			connectAttr -f ("sIBL_Controls.backgroundGain") ("sIBL_Background_file.colorGain" + $gainSubComponent);
		}
	}

	if ($connectToLighting)
	{
		expression -name "sIBL_Lighting_Expression" -s ("sIBL_Lighting_EnvironmentLigtht.rotateY = 90+" + $feedback + ".rotateX;\nsIBL_Lighting_EnvironmentLigtht.scaleX = " + $feedback + ".scaleX*2-" + $feedback + ".scaleX*7.5/100;\nsIBL_Lighting_EnvironmentLigtht.scaleY = -(" + $feedback + ".scaleY*2-" + $feedback + ".scaleY*7.5/100);\nsIBL_Lighting_EnvironmentLigtht.scaleZ = " + $feedback + ".scaleZ*2-" + $feedback + ".scaleZ*7.5/100;");
		sIBL_Maya_RfM_BridgeFeedbackControlsAndShaders("Lighting");
	}

	if ($connectToReflection)
	{
		expression -name "sIBL_Reflection_Expression" -s ("sIBL_Reflection_EnvironmentLigtht.rotateY = 90+" + $feedback + ".rotateX;\nsIBL_Reflection_EnvironmentLigtht.scaleX = " + $feedback + ".scaleX*2-" + $feedback + ".scaleX*10/100;\nsIBL_Reflection_EnvironmentLigtht.scaleY = -(" + $feedback + ".scaleY*2-" + $feedback + ".scaleY*10/100);\nsIBL_Reflection_EnvironmentLigtht.scaleZ = " + $feedback + ".scaleZ*2-" + $feedback + ".scaleZ*10/100;");
		sIBL_Maya_RfM_BridgeFeedbackControlsAndShaders("Reflection");
	}
}

global proc sIBL_Maya_RfM_ActivateRaytracing()
{
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
	setAttr "renderManGlobals.rman__torattr___rayTracing" 1;
}

global proc sIBL_Maya_RfM_ActivateLinearWorkflow(int $createBackground)
{
	setAttr "rmanFinalOutputGlobals0.rman__riopt__Display_exposure1" 2.2;
	
	if ($createBackground)
		setAttr  "sIBL_Controls.backgroundGamma" 0.454545;
}

global proc sIBL_Maya_RfM_GetGround(float $feedbackRadius)
{
	string $sIBLGroup = sIBL_Maya_RfM_GetSIBLGroup();
	string $ground[] = `polyPlane -sx 15 -sy 15`;
	delete -ch;

	setAttr ($ground[0] + ".overrideEnabled") 1;
	setAttr ($ground[0] + ".overrideShading") 0;

	string $scaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $scaleAttribute in $scaleAttributesList )
		setAttr ($ground[0] + "." + $scaleAttribute) ($feedbackRadius/4);

	parent $ground[0] $sIBLGroup;

	sIBL_Maya_RfM_AddToDisplayLayer("sIBL_Ground_Layer", $ground[0]);

	rename $ground[0] "sIBL_Ground";
}

global proc sIBL_Maya_RfM_ActivateRfM()
{
	if (`pluginInfo -q -loaded "RenderMan_for_Maya"` == 0)
	{
		loadPlugin("RenderMan_for_Maya");
	}
	setAttr defaultRenderGlobals.currentRenderer -type "string" "renderMan";
	setAttr "renderManGlobals.rman__riattr___ShadingRate" 1;
}

global proc string[] sIBL_Maya_RfM_GetShapes(string $xform)
{
   string $shapes[];
   $shapes[0] = $xform;
   if ("transform" == `nodeType $xform`)
      $shapes = `listRelatives -fullPath -shapes $xform`;
   return $shapes;
}

global proc string sIBL_Maya_RfM_GetTransform(string $shape)
{
   string $transform = "";
   if ("transform" != `nodeType $shape`)
   {
      string $parents[] = `listRelatives -fullPath -parent $shape`;
      $transform = $parents[0];
   }
   return $transform;
}

global proc int sIBL_Maya_RfM_ObjectExists(string $object, string $errorMessage)
{
	string $objectList[] = `ls -fl $object`;
	if ($objectList[0] != "")
	{
		return 1;
	}
	else
	{
		error($errorMessage);
		return 0;
	}
}

global proc string sIBL_Maya_RfM_GetObject(string $object)
{
	string $list[] = `ls -fl $object`;
	return $list[0];
}

global proc sIBL_Maya_RfM_AddToDisplayLayer( string $layerName, string $object)
{
	string $layer = sIBL_Maya_RfM_GetObject($layerName);
	if( $layer == "" )
		$layer = `createDisplayLayer -name $layerName`;
	editDisplayLayerMembers -noRecurse $layer $object;
}