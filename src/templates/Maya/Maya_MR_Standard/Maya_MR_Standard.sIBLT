[Template]
Name = @Name | Standard | String | Template Name
HelpFile = @HelpFile | help/Maya_MR_Standard Template Manual.htm | String | Help File
Release = @Release | 1.6.9 | String | Template Release
Date = @Date | 29 March 2010 | String | Date
Author = @Author | Kel Solaar / Brainspoon | String | Author
Email = @Email | kelsolaar_fool@hotmail.com | String | Email
Url = @Url | http://my.opera.com/KelSolaar/blog/ | String | Url
Software = @Software | Maya | String | Software
Version = @Version | 2K | String | Version
Renderer = @Renderer | Mental Ray | String | Renderer
OutputScript = @OutputScript | sIBL_Maya_Import.mel | String | Output Script
Comment = @Comment | This is Maya 2K Mental Ray Template. | String | Comment

[sIBL File Attributes]
Background|BGfile = @BGfile
Background|BGheight = @BGheight
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createLighting = @createLighting | 1 | Boolean | Create Lighting
createReflection = @createReflection | 1 | Boolean | Create Reflection
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
createFeedBack = @createFeedBack | 1 | Boolean | Create Feedback
feedbackRadius = @feedbackRadius | 500 | Float | Feedback Radius
createGround = @createGround | 1 | Boolean | Create Ground
shadowCatcher = @shadowCatcher | 1 | Boolean | Ground Shadow Catcher
hideLights = @hideLights | 1 | Boolean | Hide Lights
physicalSun = @physicalSun | 1 | Boolean | Physical Sun
activateFinalGather = @activateFinalGather | 1 | Boolean | Activate Final Gather
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow
framebufferGamma = @framebufferGamma | 0 | Boolean | Use Framebuffer Gamma
photographicTonemapper = @photographicTonemapper | 0 | Boolean | Use Photographic Tonemapper
showCamerasDialog = @showCamerasDialog | 0 | Boolean | Cameras Selection Dialog

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | source "$loaderScriptPath"; | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 2048 | Integer | Default Port

[Script]
// @OutputScript - @Release For @Software @Version
// Author : @Author
// EMail : @Email
// Homepage : @Url
// Template Last Modified : @Date
// sIBL_Framework
string $cBackgroundFilePath = "@BGfile";
int $cBackgroundWidth = @BGheight*2;
string $cLightingFilePath = "@EVfile";
float $lightingMultiplier = @EVmulti;
float $lightingGamma = @EVgamma;
string $cReflectionFilePath = "@REFfile";
float $reflectionMultiplier = @REFmulti;
float $reflectionGamma = @REFgamma;
float $sunU = @SUNu;
float $sunV = @SUNv;
float $sunColor[] = {@SUNcolor};
float $sunMultiplier = @SUNmulti;
float $Height = @Height;
float $North = @North;
string $dynamicLights = "@dynamicLights";
int $createBackground = @createBackground;
int $createLighting = @createLighting;
int $createReflection = @createReflection;
int $createSun = @createSun;
int $createLights = @createLights;
int $createFeedBack = @createFeedBack;
float $feedbackRadius = @feedbackRadius;
int $createGround = @createGround;
int $shadowCatcher = @shadowCatcher;
int $hideLights = @hideLights;
int $physicalSun = @physicalSun;
int $activateFinalGather = @activateFinalGather;
int $activateLinearWorkflow = @activateLinearWorkflow;
int $framebufferGamma = @framebufferGamma;
int $photographicTonemapper = @photographicTonemapper;
int $showCamerasDialog = @showCamerasDialog;

sIBL_Maya_MR_Setup($cBackgroundFilePath,
		$cBackgroundWidth,
		$cLightingFilePath,
		$lightingMultiplier,
		$lightingGamma,
		$cReflectionFilePath,
		$reflectionMultiplier,
		$reflectionGamma,
		$sunU,
		$sunV,
		$sunColor,
		$sunMultiplier,
		$Height,
		$North,
		$dynamicLights,
		$createBackground,
		$createLighting,
		$createReflection,
		$createSun,
		$createLights,
		$createFeedBack,
		$createGround,
		$shadowCatcher,
		$feedbackRadius,
		$hideLights,
		$physicalSun,
		$activateFinalGather,
		$activateLinearWorkflow,
		$framebufferGamma,
		$photographicTonemapper,
		$showCamerasDialog);

global proc sIBL_Maya_MR_Setup(string $cBackgroundFilePath,
			int $cBackgroundWidth,
			string $cLightingFilePath,
			float $lightingMultiplier,
			float $lightingGamma,
			string $cReflectionFilePath,
			float $reflectionMultiplier,
			float $reflectionGamma,
			float $sunU,
			float $sunV,
			float $sunColor[],
			float $sunMultiplier,
			float $Height,
			float $North,
			string $dynamicLights,
			int $createBackground,
			int $createLighting,
			int $createReflection,
			int $createSun,
			int $createLights,
			int $createFeedBack,
			int $createGround,
			int $shadowCatcher,
			float $feedbackRadius,
			int $hideLights,
			int $physicalSun,
			int $activateFinalGather,
			int $activateLinearWorkflow,
			int $framebufferGamma,
			int $photographicTonemapper,
			int $showCamerasDialog)
{
	print("sIBL_GUI | Starting sIBL File Import !\n");
	string $camerasList[] = `ls -fl -type "camera"`;
	int $breakExecution = 0;
	if($showCamerasDialog)
	{
		string $cLocator = `createNode locator`;
		string $cLocatorTransform = sIBL_Maya_MR_GetTransform($cLocator);
		addAttr -ln "camerasList"  -dt "string"  $cLocatorTransform;
		rename $cLocatorTransform "sIBL_GUI_CamerasList_Container";
		string $pickSessionResult = `layoutDialog -t "sIBL_GUI Camera Chooser" -ui "sIBL_Maya_MR_CameraChooser"`;
		if($pickSessionResult == "Cancel")
		{
			$breakExecution = 1;
			warning("sIBL_GUI | sIBL File Import Canceled !\n");
			delete "sIBL_GUI_CamerasList_Container";
			return;
		}
		$camerasList = stringToStringArray(`getAttr "sIBL_GUI_CamerasList_Container.camerasList"`, ",");
		if(size($camerasList) == 0)
		{
			$breakExecution = 1;
			warning("sIBL_GUI | No Cameras Selected, Import Canceled !\n");
			delete "sIBL_GUI_CamerasList_Container";
			return;
		}
	}

	if($breakExecution == 0)
	{
		sIBL_Maya_MR_ActivateMentalRay();

		sIBL_Maya_MR_EnvironmentDeletion();
		
		sIBL_Maya_MR_GetMainLocator();

		if ($hideLights)
			sIBL_Maya_MR_HideLights();

		sIBL_Maya_MR_GetEnvironmentShaders($camerasList, $createBackground, $createLighting, $createReflection, $cBackgroundFilePath, $cLightingFilePath, $cReflectionFilePath);

		if ($createFeedBack)
		{
			if($cBackgroundWidth > 8192)
			{
				confirmDialog -title "sIBL_GUI | Information" -message ( "The Background Image Is Too Large To Be Displayed On The Visual Feedback.\nCurrent Environment Image Width : " +  $cBackgroundWidth + " Pixels.\nThe Visual Feedback Will Use The Reflection Image Instead." )  -button "Ok" -defaultButton "Ok";
				sIBL_Maya_MR_GetFeedback($cReflectionFilePath, $feedbackRadius);
			}
			else
			{
				sIBL_Maya_MR_GetFeedback($cBackgroundFilePath, $feedbackRadius);
			}
		}

		if (sIBL_Maya_MR_ObjectExists( "sIBL_Feedback", "sIBL_GUI | No Feedback Found, Aborting !\n"))
		{
			if ($sunU != -1 && $sunV != -1)
			{
				if ($createSun)
				{
					sIBL_Maya_MR_GetSun($sunU, $sunV, $sunColor, $sunMultiplier, $feedbackRadius, $physicalSun);
				}
			}

			if ($dynamicLights != -1)
			{
				if ($createLights)
				{
					sIBL_Maya_MR_GetDynamicLights($dynamicLights, $feedbackRadius);
				}
			}

			string $cFeedback = sIBL_Maya_MR_GetObject("sIBL_Feedback");
			sIBL_Maya_MR_ConnectFeedBackToSIBLShaders($cFeedback, $createBackground, $createLighting, $createReflection);

			if($createGround)
				sIBL_Maya_MR_GetGround($feedbackRadius, $shadowCatcher);

			if ($activateFinalGather)
				sIBL_Maya_MR_ActivateFinalGather();

			if ($activateLinearWorkflow)
				sIBL_Maya_MR_ActivateLinearWorkflow($camerasList, $createBackground, $photographicTonemapper, $framebufferGamma);

			print("sIBL_GUI | sIBL File Import Finished !\n");
		}
	}
}

global proc sIBL_Maya_MR_ScrollListSelectAll()
{
	for($i=1;$i<=`textScrollList -q -ni camerasScrollList`;$i++)
	{
		textScrollList -e -sii $i camerasScrollList;
	}
}

global proc sIBL_Maya_MR_ScrollListSelectNone()
{
	textScrollList -e -da camerasScrollList;
}

global proc sIBL_Maya_MR_CameraChooser()
{
	string $formLayout = `setParent -q`;
	formLayout -e -height 300 $formLayout;
	string $selectAllButton = `button -label "Select All" -command "sIBL_Maya_MR_ScrollListSelectAll" selectAllButton`;
	string $selectNoneButton = `button -label "Select None" -command "sIBL_Maya_MR_ScrollListSelectNone" selectNoneButton`;

	string $camerasScrollList = `textScrollList
			-allowMultiSelection true
			-fn  smallFixedWidthFont
			-sc "sIBL_Maya_MR_SetSelectedCameras"
		camerasScrollList`;

	string $cameraList[] = `ls -l -type "camera"`;
	for($camera in $cameraList)
	{
		textScrollList -e -append $camera camerasScrollList;
	}

	string $rowForButtons = `rowLayout -numberOfColumns 2 -cl2 "center" "center" -ct2 "both" "both"`;
		string $okButton = `button -label "Ok" -command "layoutDialog -dismiss \"Ok\"" okButton`;
		string $cancelButton = `button -label "Cancel" -command  "layoutDialog -dismiss \"Cancel\""  cancelButton`;

	int $spacer = 4;
	int $margin = 4;
	formLayout -edit

		-attachForm	$selectAllButton	"top"		$margin
		-attachForm	$selectAllButton	"left"		$margin
 		-attachForm	$selectAllButton	"right"  	$margin

		-attachControl	$selectNoneButton	"top"		$spacer		$selectAllButton
		-attachForm	$selectNoneButton	"left"   	$margin
 		-attachForm	$selectNoneButton	"right"  	$margin

		-attachControl	$camerasScrollList	"top"		$spacer	$selectNoneButton
		-attachForm	$camerasScrollList	"right" 		$margin
 		-attachForm	$camerasScrollList	"left"  		$margin
		-attachControl	$camerasScrollList	"bottom"  	$spacer 	$rowForButtons

		-attachForm	$rowForButtons		"left"   	$margin
 		-attachForm	$rowForButtons		"right"  	$margin
		-attachForm	$rowForButtons		"bottom" 	$margin

		$formLayout;
}

global proc sIBL_Maya_MR_SetSelectedCameras()
{
	string $containerValue = stringArrayToString(`textScrollList -q -si camerasScrollList`, ",");
	setAttr -type "string" "sIBL_GUI_CamerasList_Container.camerasList" $containerValue;
}

global proc sIBL_Maya_MR_HideLights()
{
	SelectAllLights();
	if(size(`ls -sl`) != 0)
		HideSelectedObjects();
}

global proc sIBL_Maya_MR_DeleteType( string $cType, string $cFilter)
{
		string $cTypesList[] = `ls -type $cType $cFilter`;
		if(size($cTypesList) != 0)
			delete($cTypesList);
}

global proc sIBL_Maya_MR_EnvironmentDeletion()
{
	// sIBL Transform Group Deletion.
	string $sceneSIBLGroup[] = `ls -fl "sIBL"`;
	if ($sceneSIBLGroup[0] != "")
	{
		delete($sceneSIBLGroup);
	}

	// sIBL mip_rayswitch Shader Deletion.
	sIBL_Maya_MR_DeleteType("mip_rayswitch", "sIBL*");

	// sIBL mip_gamma_gain Shaders Deletion.
	sIBL_Maya_MR_DeleteType("mip_gamma_gain", "sIBL*");

	// sIBL mib_lookup_spherical Shaders Deletion.
	sIBL_Maya_MR_DeleteType("mib_lookup_spherical", "sIBL*");

	// sIBL mentalrayTexture Shaders Deletion.
	sIBL_Maya_MR_DeleteType("mentalrayTexture", "sIBL*");

	// sIBL shadingEngine Shaders Deletion.
	sIBL_Maya_MR_DeleteType("shadingEngine", "sIBL*");

	// sIBL lambert Shaders Deletion.
	sIBL_Maya_MR_DeleteType("lambert", "sIBL*");

	// sIBL file Shaders Deletion.
	sIBL_Maya_MR_DeleteType("file", "sIBL*");

	// sIBL place2dTexture Shaders Deletion.
	sIBL_Maya_MR_DeleteType("place2dTexture", "sIBL*");

	// sIBL Mip_matteshadow Deletion.
	sIBL_Maya_MR_DeleteType("mip_matteshadow", "sIBL*");

	// sIBL Expressions Deletion.
	sIBL_Maya_MR_DeleteType("expression", "sIBL*");
	
	// sIBL mia_exposure_photographic Shaders Deletion.
	sIBL_Maya_MR_DeleteType("mia_exposure_photographic", "sIBL*");

	// sIBL mia_exposure_simple Shaders Deletion.
	sIBL_Maya_MR_DeleteType("mia_exposure_simple", "sIBL*");

	// sIBL mia_physicalsun Shaders Deletion.
	sIBL_Maya_MR_DeleteType("mia_physicalsun", "sIBL*");
	
	// sIBL Condition Nodes Deletion.
	sIBL_Maya_MR_DeleteType("condition", "sIBL*");
	
	// sIBL mib_color_alpha Nodes Deletion.
	sIBL_Maya_MR_DeleteType("mib_color_alpha", "sIBL*");
	
	// sIBL displayLayer Nodes Deletion.
	sIBL_Maya_MR_DeleteType("displayLayer", "sIBL*");
}

global proc sIBL_Maya_MR_GetMainLocator()
{
	string $sIBLGroup = sIBL_Maya_MR_GetSIBLGroup();
	string $cSIBLLocator = `createNode annotationShape`;
	
	setAttr ($cSIBLLocator + ".displayArrow") 0;
	setAttr -lock true -keyable false ($cSIBLLocator + ".displayArrow");
	setAttr -type "string" ($cSIBLLocator + ".text") "[ Smart IBL Controls ]";
	
	string $cSIBLLocatorTransform = sIBL_Maya_MR_GetTransform($cSIBLLocator);
	
	// Adding Attributes For Various Toggling And CC Controls.
	addAttr -ln "renderTogglers" -nn "[ Render Togglers ]" -at "enum" -en "Smart IBL" $cSIBLLocatorTransform;
	setAttr -e-keyable true ($cSIBLLocatorTransform + "." + "renderTogglers" );
	setAttr -lock true ($cSIBLLocatorTransform + "." + "renderTogglers" );

	string $cComponentsList[] = { "Background", "Reflection", "Lighting" };
	
	for( $cComponent in $cComponentsList )
	{	
		addAttr -ln ( "toggle" + $cComponent )  -nn ( $cComponent ) -at bool  $cSIBLLocatorTransform;
		setAttr -e-keyable true ($cSIBLLocatorTransform + ( ".toggle" + $cComponent ) );
		setAttr ($cSIBLLocatorTransform + ( ".toggle" + $cComponent ) ) true;
	}
	
	string $cControlsList[] = { "Gamma", "Gain" };

	for( $cComponent in $cComponentsList )
	{	
		addAttr -ln ("cc" + $cComponent) -nn ( "[ " + $cComponent + " CC ]" ) -at "enum" -en "Smart IBL" $cSIBLLocatorTransform;
		setAttr -e-keyable true ($cSIBLLocatorTransform + "." + ("cc" + $cComponent) );
		setAttr -lock true ($cSIBLLocatorTransform + "." + ("cc" + $cComponent) );
		
		for( $cControl in $cControlsList )
		{
			string $cLowerCaseComponent = `tolower $cComponent`;
			addAttr -ln ( $cLowerCaseComponent + $cControl )  -nn $cControl -at double  $cSIBLLocatorTransform;
			setAttr -e-keyable true ($cSIBLLocatorTransform + "." + ( $cLowerCaseComponent + $cControl ) );
			setAttr ($cSIBLLocatorTransform + "." + ( $cLowerCaseComponent + $cControl ) ) true;
		}
	}

	setAttr ( $cSIBLLocatorTransform + ".ty" ) 5;
	string $cLocksList[] = { "rx", "ry", "rz", "sx", "sy", "sz" };
	for( $cLock in $cLocksList )
		setAttr -lock true -keyable false ($cSIBLLocatorTransform + "." + $cLock);

	parent $cSIBLLocatorTransform $sIBLGroup;
	
	rename ( "sIBL" + $cSIBLLocatorTransform) "sIBL_Controls";
}

global proc sIBL_Maya_MR_GetEnvironmentShadersBranch(string $cRaySwitch, string $connectionEntries[], string $cFilePath, string $cPrefix, int $useOverride)
{
	string $cGammaGain = `createNode mip_gamma_gain`;
	
	if($useOverride)
	{
		string $conditionNode = `createNode condition`;
		setAttr ($conditionNode + ".secondTerm") 1;
		connectAttr -f ($cGammaGain + ".outValue") ($conditionNode + ".colorIfTrue");
			
		string $colorAlphaNode = `createNode mib_color_alpha`;
		setAttr ($colorAlphaNode + ".factor") 0;
		connectAttr -f ($colorAlphaNode + ".outValue") ($conditionNode + ".colorIfFalse");
		
		for($entry in $connectionEntries)
		{
			connectAttr -f ($conditionNode + ".outColor") ($cRaySwitch + "." + $entry);
		}

		rename $conditionNode ($cPrefix + "_" + `nodeType $conditionNode`);
		rename $colorAlphaNode ($cPrefix + "_" + `nodeType $colorAlphaNode`);
	}
	else
	{
		for($entry in $connectionEntries)
		{
			connectAttr -f ($cGammaGain + ".outValue") ($cRaySwitch + "." + $entry);
			connectAttr -f ($cGammaGain + ".outValueA") ($cRaySwitch + "." + $entry + "A");
		}
	}

	string $cLookupSpherical = `createNode mib_lookup_spherical`;

	connectAttr -f ($cLookupSpherical + ".outValue") ($cGammaGain + ".input");
	connectAttr -f ($cLookupSpherical + ".outValueA") ($cGammaGain + ".inputA");

	string $cMentalrayTexture = `createNode mentalrayTexture`;

	connectAttr -f ($cMentalrayTexture + ".message") ($cLookupSpherical + ".tex");
	setAttr -type "string" ($cMentalrayTexture + ".fileTextureName") $cFilePath;

	rename $cGammaGain ($cPrefix + "_" + `nodeType $cGammaGain`);
	rename $cLookupSpherical ($cPrefix + "_" + `nodeType $cLookupSpherical`);
	rename $cMentalrayTexture ($cPrefix + "_" + `nodeType $cMentalrayTexture`);
}

global proc sIBL_Maya_MR_GetEnvironmentShaders(string $camerasList[], int $createBackground, int $createLighting, int $createReflection, string $cBackgroundFilePath, string $cLightingFilePath, string $cReflectionFilePath)
{
	string $cRaySwitch = `createNode mip_rayswitch`;

	if ($createBackground)
	{
		string $connectionEntries[] = {"eye", "transparent", "refraction"};
		sIBL_Maya_MR_GetEnvironmentShadersBranch($cRaySwitch, $connectionEntries, $cBackgroundFilePath, "sIBL_Background", 1);
	}

	if ($createLighting)
	{
		string $connectionEntries[] = {"finalgather"};
		sIBL_Maya_MR_GetEnvironmentShadersBranch($cRaySwitch,  $connectionEntries, $cLightingFilePath, "sIBL_Lighting", 1);
	}

	if ($createReflection)
	{
		string $connectionEntries[] = {"reflection", "environment"};
		sIBL_Maya_MR_GetEnvironmentShadersBranch($cRaySwitch, $connectionEntries, $cReflectionFilePath, "sIBL_Reflection", 1);
	}

	for($cCamera in $camerasList)
	{
		connectAttr -f ($cRaySwitch + ".message") ($cCamera + ".miEnvironmentShader");
	}

	rename $cRaySwitch ("sIBL_" + `nodeType $cRaySwitch`);
}

global proc string sIBL_Maya_MR_GetSIBLGroup()
{
	string $cSIBLGroup[] = `ls -fl "sIBL"`;
	if ($cSIBLGroup[0] == "")
	{
		$cSIBLGroup[0] = `createNode "transform" -n "sIBL"`;

		string $cLocksList[] = { "tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz" };
		for( $cLock in $cLocksList )
			setAttr -lock true -keyable false ($cSIBLGroup[0] + "." + $cLock);
	}

	return $cSIBLGroup[0];
}

global proc string sIBL_Maya_MR_GetFeedbackGeometry(float $feedbackRadius)
{
 	string $cFeedback[] = `sphere -name "sIBL_Feedback"`;
	rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 4 -du 3 -sv 8 -dv 3 -tol 0.01 -fr 0  -dir 2 $cFeedback;
	delete -ch;

	setAttr ($cFeedback[0] + ".miDeriveFromMaya") 0;
	setAttr ($cFeedback[0] + ".miHide") 1;

	setAttr ($cFeedback[0] + ".scaleZ") (-1);
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $cFeedback[0];

	string $cScaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $cScaleAttribute in $cScaleAttributesList )
		setAttr ($cFeedback[0] + "." + $cScaleAttribute) $feedbackRadius;

	setAttr ($cFeedback[0] + ".rotateZ") 90;

	string $cLocksList[] = { "tx", "ty", "tz", "ry", "rz" };
	for( $cLock in $cLocksList )
		setAttr -lock true -keyable false ($cFeedback[0] + "." + $cLock);	
	
	string $cFeedBackShapes[] = sIBL_Maya_MR_GetShapes($cFeedback[0]);
	setAttr ($cFeedBackShapes[0] + ".opposite") 0;

	sIBL_Maya_MR_AddToDisplayLayer("sIBL_FeedBack_Layer", $cFeedback[0]);

	return $cFeedback[0];
}

global proc sIBL_Maya_MR_GetFeedback(string $cBackgroundFilePath, float $feedbackRadius)
{
 	string $sIBLGroup = sIBL_Maya_MR_GetSIBLGroup();
	string $cFeedback = sIBL_Maya_MR_GetFeedbackGeometry($feedbackRadius);
	parent $cFeedback $sIBLGroup;

	string $cLambertShader = `shadingNode -asShader lambert`;
	string $cShadingEngine = `sets -renderable true -noSurfaceShader true -empty`;
	sets -renderable true -noSurfaceShader true -empty -name $cShadingEngine;
	connectAttr -f ($cLambertShader + ".outColor") ($cShadingEngine + ".surfaceShader");

	string $cFile = `createNode file`;
	if (!`attributeExists "resolution" $cFile`)
		addAttr -ln "resolution" -at long $cFile;
 	setAttr  ($cFile + ".resolution") 2048;

	setAttr -type "string" ($cFile + ".fileTextureName") $cBackgroundFilePath;

	connectAttr -f ($cFile + ".outColor") ($cLambertShader + ".color");

	string $cPlace2DTexture = `createNode place2dTexture`;

	connectAttr -f ($cPlace2DTexture + ".outUV") ($cFile + ".uvCoord");
	connectAttr -f ($cPlace2DTexture + ".outUvFilterSize") ($cFile + ".uvFilterSize");

	string $cUVAttributes[] = { "coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV"};
	for( $cUVAttribute in $cUVAttributes )
		connectAttr -f ($cPlace2DTexture + "." + $cUVAttribute) ($cFile + "." + $cUVAttribute);

	setAttr ($cPlace2DTexture + ".rotateFrame") 90;

	select -r $cFeedback;
	sets -e -forceElement $cShadingEngine;

	rename $cLambertShader ("sIBL_Feedback_" + `nodeType $cLambertShader`);
	rename $cShadingEngine ("sIBL_Feedback_" + `nodeType $cShadingEngine`);
	rename $cFile ("sIBL_Feedback_" + `nodeType $cFile`);
	rename $cPlace2DTexture ("sIBL_Feedback_" + `nodeType $cPlace2DTexture`);
}

global proc string sIBL_Maya_MR_GetLigthsTargetLocator()
{
	string $cSIBL_Lights_Target_Locator[] = `ls -fl "sIBL_Lights_Target_Locator"`;

	if ($cSIBL_Lights_Target_Locator[0] == "")
	{
		string $sIBLGroup = sIBL_Maya_MR_GetSIBLGroup();

		$cSIBL_Lights_Target_Locator = `spaceLocator`;
		parent $cSIBL_Lights_Target_Locator[0] $sIBLGroup;

		rename $cSIBL_Lights_Target_Locator[0] "sIBL_Lights_Target_Locator";
	}

	$cSIBL_Lights_Target_Locator = `ls -fl "sIBL_Lights_Target_Locator"`;
	
	sIBL_Maya_MR_AddToDisplayLayer("sIBL_Lighting_Layer", $cSIBL_Lights_Target_Locator[0]);

	return $cSIBL_Lights_Target_Locator[0];
}

global proc sIBL_Maya_MR_GetLight( string $cLigthType, int $physicalSun, string $cLightName, float $cScale, float $cColor[], float $cIntensity, float $cU, float $cV )
{
	string $sIBLGroup = sIBL_Maya_MR_GetSIBLGroup();
	string $cFeedback[] = `ls -fl "sIBL_Feedback"`;

	string $cLight = `shadingNode -asLight $cLigthType`;

	if($physicalSun)
	{
		string $cPhysicalSunShader = `createNode mia_physicalsun`;
		string $cLightShape[] = sIBL_Maya_MR_GetShapes($cLight);
		setAttr ($cPhysicalSunShader + ".y_is_up") 1;
		setAttr ($cPhysicalSunShader + ".multiplier") ($cIntensity/10);

		connectAttr -force ($cPhysicalSunShader + ".message") ($cLightShape[0] + ".miLightShader");
		connectAttr -force ($cPhysicalSunShader + ".message") ($cLightShape[0] + ".miPhotonEmitter");

		rename $cPhysicalSunShader ( $cLightName +"_mia_physicalsun");
	}

	setAttr ($cLight + ".locatorScale") $cScale;
	setAttr -type double3 ($cLight + ".color") ($cColor[0]/255) ($cColor[1]/255) ($cColor[2]/255);
	setAttr ($cLight + ".intensity") $cIntensity;
	setAttr ($cLight + ".useRayTraceShadows") 1;
	parent $cLight $sIBLGroup;

	string $cPointOnSurfaceInfo = `createNode pointOnSurfaceInfo`;
	connectAttr -f ($cFeedback[0] + "Shape.worldSpace[0]") ($cPointOnSurfaceInfo + ".inputSurface");
	connectAttr -f ($cPointOnSurfaceInfo + ".position") ($cLight + ".translate");

	setAttr ($cPointOnSurfaceInfo + ".parameterU") (0.5 + (0.5 - $cV));
	setAttr ($cPointOnSurfaceInfo + ".parameterV") (0.5 + (0.5 - $cU));

	string $cSIBL_Lights_Target_Locator = sIBL_Maya_MR_GetLigthsTargetLocator();

	select $cSIBL_Lights_Target_Locator;
	select -tgl $cLight;
	string $cConstraint[] = `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0`;

	sIBL_Maya_MR_AddToDisplayLayer("sIBL_Lighting_Layer", $cLight);

	rename $cLight $cLightName;
	rename $cPointOnSurfaceInfo ($cLightName + "_PointOnSurfaceInfo");
	rename $cConstraint[0] ($cLightName + "_AimConstraint");
}

global proc sIBL_Maya_MR_GetSun(float $sunU, float $sunV, float $sunColor[], float $sunMultiplier, float $feedbackRadius, int $physicalSun)
{
	sIBL_Maya_MR_GetLight("directionalLight", $physicalSun, "sIBL_Sun", ($feedbackRadius / 10), $sunColor, $sunMultiplier, $sunU, $sunV);
}

global proc sIBL_Maya_MR_GetDynamicLights(string $compactedDynamicLights, float $feedbackRadius)
{
	string $sIBLGroup = sIBL_Maya_MR_GetSIBLGroup();
	string $cFeedback[] = `ls -fl "sIBL_Feedback"`;

	string $dynamicLights[];
	tokenize($compactedDynamicLights, "|", $dynamicLights);

	for($i=0; $i<size($dynamicLights); $i+=8)
	{
		float $cColor[] = {float($dynamicLights[$i+2]), float($dynamicLights[$i+3]), float($dynamicLights[$i+4])};
		sIBL_Maya_MR_GetLight("spotLight", 0, "sIBL_DKL_" + $dynamicLights[$i+1], ($feedbackRadius / 15), $cColor, float($dynamicLights[$i+5]), float($dynamicLights[$i+6]), float($dynamicLights[$i+7]));
	}
}

global proc sIBL_Maya_MR_BridgeFeedbackControlsAndShaders( string $cComponentsList[], string $cTarget )
{
		connectAttr -f ( "sIBL_Controls.toggle" + $cTarget )  ( "sIBL_" + $cTarget + "_condition.firstTerm") ;
		string $cLowerCaseTarget = `tolower $cTarget`;

		for( $cComponent in $cComponentsList)
		{			
			string $cLowerCaseComponent = `tolower $cComponent`;
			connectAttr -f ( "sIBL_Controls." + $cLowerCaseTarget + $cComponent )  ("sIBL_" + $cTarget + "_mip_gamma_gain." + $cLowerCaseComponent);
		}
}

global proc sIBL_Maya_MR_ConnectFeedBackToSIBLShaders(string $cFeedback, int $connectToBackground, int $connectToLighting, int $connectToReflection)
{
	string $cComponentsList[] = {"Gamma", "Gain"};

	if ($connectToBackground)
	{
		expression -name "sIBL_Background_Rotate_Expression" -s ("sIBL_Background_mib_lookup_spherical.rotate = deg_to_rad(" + $cFeedback + ".rotateX/2);");
		sIBL_Maya_MR_BridgeFeedbackControlsAndShaders($cComponentsList, "Background");
	}

	if ($connectToLighting)
	{
		expression -name "sIBL_Lighting_Rotate_Expression" -s ("sIBL_Lighting_mib_lookup_spherical.rotate = deg_to_rad(" + $cFeedback + ".rotateX/2);");
		sIBL_Maya_MR_BridgeFeedbackControlsAndShaders($cComponentsList, "Lighting");
	}

	if ($connectToReflection)
	{
		expression -name "sIBL_Reflection_Rotate_Expression" -s ("sIBL_Reflection_mib_lookup_spherical.rotate = deg_to_rad(" + $cFeedback + ".rotateX/2);");
		sIBL_Maya_MR_BridgeFeedbackControlsAndShaders($cComponentsList, "Reflection");
	}
}

global proc sIBL_Maya_MR_ActivateFinalGather()
{
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
	setAttr "miDefaultOptions.finalGather" 1;
	setAttr "miDefaultOptions.finalGatherTraceDiffuse" 1;
	setAttr "miDefaultOptions.finalGatherTraceDepth" 3;
}

global proc sIBL_Maya_MR_ActivateLinearWorkflow(string $camerasList[], int $createBackground, int $photographicTonemapper, int $framebufferGamma)
{
	string $cTonemapper;
	if($photographicTonemapper)
	{
		$cTonemapper = `createNode "mia_exposure_photographic"`;
		setAttr ($cTonemapper + ".film_iso") 0;
		setAttr ($cTonemapper + ".burn_highlights") 0.25;
	}
	else
	{
		$cTonemapper = `createNode "mia_exposure_simple"`;
	}

	for($cCamera in $camerasList)
	{
			connectAttr -f ($cTonemapper + ".message") ($cCamera + ".miLensShader");
	}
	
	if ($framebufferGamma)
	{
		setAttr "miDefaultFramebuffer.gamma" 0.454545;
		setAttr ($cTonemapper + ".gamma") 1.0;
	}
	else
	{
		setAttr "miDefaultFramebuffer.gamma" 1.0;
		setAttr ($cTonemapper + ".gamma") 2.2;
		
		// Adjust Background Color Space Because Of The Tonemapper
		if ($createBackground)
			setAttr  "sIBL_Controls.backgroundGamma" 0.454545;
	}

	rename $cTonemapper ("sIBL_" + `nodeType $cTonemapper`);
}

global proc sIBL_Maya_MR_GetGround(float $feedbackRadius, int $shadowCatcher)
{
	string $sIBLGroup = sIBL_Maya_MR_GetSIBLGroup();
	string $cGround[] = `polyPlane -sx 15 -sy 15`;
	delete -ch;

	setAttr ($cGround[0] + ".overrideEnabled") 1;
	setAttr ($cGround[0] + ".overrideShading") 0;

	string $cScaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $cScaleAttribute in $cScaleAttributesList )
		setAttr ($cGround[0] + "." + $cScaleAttribute) ($feedbackRadius/4);

	parent $cGround[0] $sIBLGroup;

	if($shadowCatcher)
	{
		if( `objExists "sIBL_Background_mip_gamma_gain"` )
		{
			string $cMip_MSNode = `createNode "mip_matteshadow"`;
			connectAttr -f sIBL_mip_rayswitch.outValue ( $cMip_MSNode + ".background" );
			setAttr ($cMip_MSNode + ".catch_indirect") 1;

			string $cLambertShader = `shadingNode -asShader lambert`;
			string $cShadingEngine = `sets -renderable true -noSurfaceShader true -empty`;
			sets -renderable true -noSurfaceShader true -empty -name $cShadingEngine;
			connectAttr -f ($cLambertShader + ".outColor") ($cShadingEngine + ".surfaceShader");

			connectAttr -f ($cMip_MSNode + ".message") ($cShadingEngine + ".miMaterialShader");

			select -r $cGround[0];
			sets -e -forceElement $cShadingEngine;

			rename $cMip_MSNode ("sIBL_MatteShadow_" + `nodeType $cMip_MSNode`);
			rename $cLambertShader ("sIBL_MatteShadow_" + `nodeType $cLambertShader`);
			rename $cShadingEngine ("sIBL_MatteShadow_" + `nodeType $cShadingEngine`);
		}
		else
			warning("sIBL_GUI | No Background Detected, Shadow Catcher Will Not Be Set !\n");
	}
	
	sIBL_Maya_MR_AddToDisplayLayer("sIBL_Ground_Layer", $cGround[0]);
	
	rename $cGround[0] "sIBL_Ground";		
}

global proc sIBL_Maya_MR_ActivateMentalRay()
{
	if (`pluginInfo -q -loaded "Mayatomr"` == 0)
	{
		loadPlugin("Mayatomr");
	}
	setAttr defaultRenderGlobals.currentRenderer -type "string" "mentalRay";
	miCreateGlobalsNode;
	miCreateDefaultNodes;
	miCreateOtherOptionsNodesForURG;
}

global proc string[] sIBL_Maya_MR_GetShapes(string $xform)
{
   string $shapes[];
   $shapes[0] = $xform;
   if ("transform" == `nodeType $xform`)
      $shapes = `listRelatives -fullPath -shapes $xform`;
   return $shapes;
}

global proc string sIBL_Maya_MR_GetTransform(string $shape)
{
   string $transform = "";
   if ("transform" != `nodeType $shape`)
   {
      string $parents[] = `listRelatives -fullPath -parent $shape`;
      $transform = $parents[0];
   }
   return $transform;
}

global proc int sIBL_Maya_MR_ObjectExists(string $cObject, string $cErrorMessage)
{
	string $cObjectList[] = `ls -fl $cObject`;
	if ($cObjectList[0] != "")
	{
		return 1;
	}
	else
	{
		error($cErrorMessage);
		return 0;
	}
}

global proc string sIBL_Maya_MR_GetObject(string $cObject)
{
	string $cList[] = `ls -fl $cObject`;
	return $cList[0];
}

global proc sIBL_Maya_MR_AddToDisplayLayer(string $cLayerName, string $cObject)
{
	string $cLayer = sIBL_Maya_MR_GetObject($cLayerName);
	if( $cLayer == "" )
		$cLayer = `createDisplayLayer -name $cLayerName`;
	editDisplayLayerMembers -noRecurse $cLayer $cObject;
}